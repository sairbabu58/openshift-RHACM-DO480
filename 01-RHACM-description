# OpenShift Advance Cluster Management RHACM DO480

https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.7

Chapter-01:

# Hub cluster (Main cluster where you can manager other k8s or openshift cluster)
# Manage cluster (other k8s or openshift cluster managed by Hub cluster)

# Once ACM istallation is done, it will create some namespaces on Hub Cluster
  > open-cluster-management                 (content main features like; ACM web-console, application search engine, deploy & manage lifecycle of cluster)
  > open-cluster-management-hub             (content the deployments that receive data from the managed clusters)
  > open-cluster-management-observability   (content all the thanos deployment that store, create & visualize the observability. the namespace on present if you enable the RHACM obeservability engine)
  
# Once Managed cluster is added to Hub cluster, it will create some namespaces on Managed cluster
Agent lists:
  > theklusterletagent
  > thesearchengineadd-on
  > the add-on for managing application deployments from RHACM
  > the add-on for applying policies
  > theadd-onfortheobservabilitycomponents

Namespace lists:
  > open-cluster-management-agent                       (contains the deployments for the klusterlet agent)
  > open-cluster-management-agent-addon                 (contains the application's deployments,s earch engine, and policies engines)
  > open-cluster-management-agent-addon-observability   (contains the observability engine's deployments)







Chapter-02: 

1) Search bar
2) Cluster sets
3) Access Controlr for RHACM
4) Role-based Access Control
5) Identity Management 

Infrastructure Tab:
------------------

  > Creating or upgrading a cluster in many different public cloud providers. Importing an existing cluster to the RHACM hub cluster so that you can manage it.
  > Manually scaling the clusters, or enabling autoscaling. The process of resizing a cluster is different if you created the cluster by using RHACM, or if the cluster already existed and you imported it to RHACM.
  > Using RHACM features such as cluster sets, cluster pools, and discovering clusters.
  
RBAC:
-----

open-cluster-management: cluster-manager-admin ==> RHACM super user, with full access. Can create a ManagedCluster resource.

open-cluster-management: admin:managed_cluster_name ==> RHACM administrator access to the ManagedCluster resource named managed_cluster_name.

open-cluster-management: view:managed_cluster_name ==> RHACM view access to the ManagedCluster resource named managed_cluster_name.

open-cluster-management: managedclusterset:admin: managed_clusterset_name ==> RHACM administrator access to the ManagedClusterSet resource named managed_clusterset_name.

open-cluster-management: managedclusterset:view: managed_clusterset_name ==> RHACM view access to the ManagedClusterSet resource named managed_clusterset_name.

open-cluster-management: subscription-admin ==> Can create Git subscriptions that deploy Kubernetes resources YAML files to multiple namespaces.


RHACM also supports the following default RHOCP roles:
-----------------------------------------------------
cluster-admin
admin
edit
view

Pratical:
--------
1) Search bar
2) Cluster sets (prod, stage)
3) Assign RBAC/role to group, who can manage which cluster (prod, stage)
4) IDM configuration, User, groups (optional not covering this chapter)










Chapter-03: Deploying and Managing Policies for RHACM

1) Governance Policies
2) Governance Dashboard
3) Stable and Community Policies
4) 
5)

Policy 
  status:
   > Enable
   > Disable
  Remediation:
   > Inform
   > Enforce
   
Policy Components:
  > Policy (Kind)
  > ConfigurationPolicy (Configuration like, create NS, Subscription, OperatorGroup, all types oc Kind resources)
  > PlacementBinding (Ref PlacementRules)
  > PlacementRules (Match cluster selector/name)
  

# Integration of other Policy Engines with RHACM
  1) Open Policy Agent (OPA)
  2) OPA Gatekeeper

# OPA Gatekeeper Integration with RHACM
  1) Install Gatekeeper Operator
  2) Deploy Gatekeeper Policy

https://github.com/stolostron/policy-collection/blob/main/community/CM-Configuration-Management/policy-gatekeeper-sample.yaml
https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.4/html-single/governance/index#managing-gatekeeper-operator-policies

# GateKeeper Policy example
    1) We can create policy it will block container image if its latest version
    $ oc apply -f httpd-latest.yaml (blocked. not allowed to create)
    $ oc apply -f httpd-v1.2-4.yaml (Allowed. allowed to create)
  
  








Chapter:04 Installing and Customizing the RHACM Observability Stack (Grafana Dashboard on RHACM)

https://access.redhat.com/documentation/en-us/red_hat_advanced_cluster_management_for_kubernetes/2.4/html-single/observability/index#doc-wrapper


  1) Configure Observability Stack (Default its not enabled)
  2) Monitoring stack
  3) Grafana dashboard
  4) Centralized Dashboard
  5) Installed on Hub Cluster
  6) Require some storage 
  7) Create namespace for Observability Stack (open-cluster-management- observability)
  8) Create a secret (secretname: multiclusterhub-operator-pull-secret in NS: open-cluster-management- observability)
  9) You can extract above secret from (NS: open-cluster-management or openshift-config // secretname: pull-secret)
  10) Follow the RHACM Book Chapter-04 for above configuration
  11) Object storage is require
  12) Disabled Observability Stack (Chapter-04 )


# Customizing Observability
  1) Customizing Grafana dashboard
  2) Prometheus Custom query PROMQL language
  3) Alerts
  4) Alerting rules










Chapter-05: (Deploying Applications Across Multiple Clusters with RHACM)
  
  1) Deploy application on multiple managed cluster
  2) GitOps concept 
  3) Kustomize 
  
# Customizing Resources with Kustomize for RHACM
  base
    deployment.yaml
    service.yaml
    route.yaml
    kustomization.yaml
  overlays
    dev
      kustomization.yaml
    prod
      kustomization.yaml
      pvc.yaml
  
  
  
  
  








Chapter-06: Install and Configure RedHat Quay

# Benefits of an Enterprise Registry

  1) Platform scalability:
     The registry scales both storage and compute resources to manage large numbers of Kubernetes and OpenShift clusters pulling and pushing container images.

  2) Access control
     A well-defined RBAC model helps you manage teams who access different image repositories on different clusters, or who authenticate against different providers.

  3) Content distribution of the images
     The registry supports widely-distributed image registry clients by identifying the locations of the stored images and serving each image from the location nearest the client.

  4) Maintenance of the list of images
     Because registry clients can store many different versions of the same image, the registry provides a mechanism to delete images that are not used.

  5) Secure source of truth
     The registry helps maintain security by providing access control to images, an auditing registry, and an alerting mechanism.
     
     
     
# Quay Features:
  1) Repository Mirroring
     You can configure Quay to mirror external registries. You can copy entire registries, or define filters based on tags to decide which images to 
     copy to the internal Quay registry. When Quay mirrors an external registry, it copies the images to its own back-end storage and stores the 
     metadata information in its database.
  
  2) Geo-replication
     By using the Geo-replication feature, Quay allows you to store registry images in a geographically distributed storage engine. After writing an image 
     to the preferred storage engine, Quay replicates the image to other storage engines across many synchronized local storage instances. This approach 
     provides users a single point of access to the registry and associated database.

     Whenever a client pulls a image, Quay serves it directly from the nearest local storage. This feature reduces bandwidth usage and costs and improves 
     performance for users. The Quay operator supports geo-replication in version 3.7 and later. You can use the repository mirroring and the geo-replication features simultaneously.
  
  3) Enterprise Authentication
    Quay supports the following identity providers: 
    • LDAP
    • OpenIDConnect
    • Keystone,theOpenStackidentityprovider
    • GitHub 
    • Google
    
  4) Tags Management and Time Machine
     Quay identifies images by mapping the tag with the full SHA256 identifier of the stored image. You can add, modify, create, or delete tags for each repository.
     For each image tag, you can configure an expiration period. When a tag expires, or is deleted, the Quay time machine feature keeps the tag for an additional configurable period. Note that when an image tag reaches its expiration, or is deleted, the underlying image is deleted only if there are no more tags pointing to its full SHA256 identifier.
     Tag management and time machine features address the challenge of maintaining reasonable storage sizes when the number of stored images grows. Furthermore, with these features you can recover deleted tags.

  5) Image Scanning
     Quay has an image vulnerability scanner based on the Clair open source project.
     You can use the Quay operator to install and configure the Quay vulnerability scanner when Quay is running on OpenShift.
     When Quay receives a push, it sends the image to Clair. Clair unpacks the image and indexes its layers. Then, Clair compares the indexed content with the information from the vulnerabilities databases. Finally, Clair generates the results for Quay.
     
     The indexing mechanism helps save compute resources and reduces the number of scans.
     
     The Red Hat OpenShift Platform Plus subscription includes Quay and Red Hat Advanced Cluster Security for Kubernetes (RHACS). RHACS also includes image scanning. However, in addition to scanning images in a registry like Quay, the RHACS scanner can also scan running containers.
     
     The Quay image scanning feature analyzes stored images by consulting the following list of vulnerabilities databases:
        • Alpine SecDB
        • AWSUpdateInfo
        • Debian Oval
        • Oracle Oval
        • RHELOval
        • SUSEOval
        • UbuntuOval
        • Pyup.io(Pythonlibraries)

  
  6) Builds
     You can configure Quay to watch source code repositories and build images when a change is detected.
     When Quay is running on OpenShift, Quay builds images using the buildah command in a Kubernetes job that uses a containerized virtual machine.
  
  7) Notifications
     Quay can send notifications for repository events. The following list shows the event types.
      • An image push
      • The start, stop, fail, cancellation, or queue of a build
      • A vulnerability detection
     The following list shows the notification actions.
      • Quay notification in the Quay web console
      • Email
      • WebhookPOSTrequest
      • Flowdock chat system
      • Hipchatchatsystem
      • Slackchatsystem
  8) Prometheus and Grafana Metrics
    Quay provides an endpoint that exports Prometheus data.
    
    The Quay operator adds a new Grafana dashboard with Quay metrics to the OpenShift console. This dashboard shows the following statistics, among others.
      • Number of users, organizations, repositories, and robot accounts
      • Computeresourcesconsumption
      • Image pulls and pushes
      • Authenticationrequests
 
  
  
 # Overview of the Quay Architecture
 
  1) Quay server
      This application manages the images and their metadata; the server is the main way that users interact with the enterprise registry.
  
  2) Clair scanner
      This application scans the images, searching for known vulnerabilities.
  
  3) Build workers
      These containers can start builds by reacting to source code repositories changes.
  4) Redis
      The Redis server stores build logs.
      
  5) Databases
      The Quay database can be PostgreSQL, MariaDB, or MySQL, provided by Red Hat or by a public cloud provider. Red Hat recommends PostgreSQL because all other database engines are scheduled for deprecation in the near future.
      The database for Clair can be PostgreSQL only.
  6) Distributed object storage
      This storage contains the image's binary content.
      For a highly-available storage engine, you can subscribe to Red Hat OpenShift Data Foundation. For more information about the distributed object storage, see Deploying and Configuring Red Hat Quay .

  
  
  
# The Quay operator

The operator manages the lifecycle of one or more Quay registries running in an OpenShift cluster. This operator provides the QuayRegistry custom resource definition (CRD) and allows you to choose which components the operator controls.
The Quay operator can manage the following components.
  • postgres: If managed, the operator creates the needed pods for the Quay metadata database.

  • clair: If managed, the operator creates the needed pods for the scanner database and application.

  • redis: If managed, the operator creates the Redis pods needed for build logs storage.

  • objectstorage: If managed, the operator uses the ObjectBucketClaim API to provide storage for image data.

  • route: If managed, the operator creates an OpenShift route to access the registry.

  • monitoring: If managed, the operator configure OpenShift and Quay to gather metrics from the Quay registries.

  • tls: If managed, the operator uses the default wildcard certificate for the OpenShift route to access Quay.
  
  • horizontalpodautoscaler: If managed, the operator defines resources for autoscaling Quay, Clair, and the pods used for mirroring.

  • mirror: If managed, the operator enables the mirror workers.
  

# Benefits of Using Quay on OpenShift

• The Quay installation on OpenShift is customizable and repeatable.
• The Quay operator can manage one or more Quay registries.
• The operator can manage Quay and all of its dependent components.
• Quay resources scale automatically when usage grows.
• Updating Quay on OpenShift is easier than updating a standalone installation.
• The Quay monitoring, alerting, and logging engines integrate with OpenShift engines.
  
  
# pratical:
  1) Install RedHat Quay operator
  2) Configure Quay Instance
  3) Create a podman Containerfile
  4) Build a demo image
  5) Push to quay registry
  6) Validation
  7) Quay RBAC
  
  
  







Chapter-07: Integrating Red Hat Quay with Red Hat OpenShift and RHACM
  1) RHACM policy for configuration
  
  
  
  
  
  
  
  
  
  
  
  


RHACS (Redhat Advance CLuster Security for Kubernetes)

• Securityinthedesignphase
• Static secure code analysis and best practices
• Container image vulnerability scanning before deploying to production
• Secure access to version control systems (VCS)
• Secure access to the continuous integration system (CI)
• Automatic build security testing
• Defensive security, or implementing a Blue Team approach

Additionally, the model must include operational security, such as the following considerations:

• Continuous container image vulnerability scanning for deployments in production
• Secure access to the continuous deployment system (CD)
• Automatic security testing of production deployments
• Offensive security by implementing a Red Team
• Dynamic security code analysis during run time
• Incident response planning

The previous security considerations apply to every software development company. However, there are some extra security 
challenges in Kubernetes environments:

• You need extra knowledge to set up users, groups, service accounts, and the role-based access control (RBAC) configuration.
• You must secure the VCS repositories containing the platform configuration.
 You must ensure that container image sources are reliable.
• You need expertise in software defined networks (SDN).
• You must secure many new attack vectors, such as container image vulnerabilities, application vulnerabilities, Kubernetes secrets management, and more.


# Addressing Security in Kubernetes with RHACS

• Vulnerability management
• Configurationmanagement
• Riskprofiling
• Threat detection
• Incident response
• Compliance analysis and reporting
• Networktrafficsegmentation
• Muliticlusterstatusvisibility



# Muliticluster Status Visibility with RHACS

• Riskprioritization
• Runtime activity and forensics
• Vulnerability threats
• Configurationrisk
• Deployment and Kubernetes metadata
• Globalsearchcapabilities
• SIEMnotifications
• SSO and scoped access controls




  

  
  
  
  
  
  
  
  
  
  
